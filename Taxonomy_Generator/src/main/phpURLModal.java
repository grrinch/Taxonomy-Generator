package main;

import java.awt.BorderLayout;
import java.awt.Frame;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author radmin
 */
public class phpURLModal extends javax.swing.JDialog {

    /**
     * Właściwość, która utrzymuje zwracany z modalu ciąg znaków zawierający adres serwera Modułu Drzewa
     */
    private String phpSyntaxTreeURL = null;
    
    /**
     * Ramka wywułująca modal
     */
    private final Frame _parent;

    /**
     * Creates new form phpURLModal
     * @param parent
     * @param modal
     * @param currentUrl
     */
    public phpURLModal(java.awt.Frame parent, boolean modal, String currentUrl) {
        super(parent, modal);
        _parent = parent;
        initComponents();
        this.setTitle("Please enter new URL");
        ImageIcon image = new ImageIcon(this.getClass().getResource("/icons/three67.png"));
        iconPanel.add(new JLabel(image), BorderLayout.CENTER);
        iconPanel.updateUI();
        urlInput.setText(currentUrl);
        jLabel2.setText("(default " + Generator.defaultPhpSyntaxTreeURL + "):");
        getRootPane().setDefaultButton(okButton);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectionProgress = new javax.swing.JProgressBar();
        connectionTestButton = new javax.swing.JButton();
        urlInput = new javax.swing.JTextField();
        iconPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        setDefaultButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        smallInfoText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        connectionTestButton.setText("Connection test");
        connectionTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionTestButtonActionPerformed(evt);
            }
        });

        urlInput.setText("jTextField1");

        iconPanel.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Please enter new phpSyntaxTree (graph generator) URL");

        jLabel2.setText("jLabel2");

        setDefaultButton.setText("Set default");
        setDefaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDefaultButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        smallInfoText.setFont(new java.awt.Font("Ubuntu", 2, 12)); // NOI18N
        smallInfoText.setText("For localhost, try: \"http://[::1]:8888/stgraph.png.php\"");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iconPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(connectionProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(connectionTestButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(smallInfoText)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(urlInput, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setDefaultButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iconPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(urlInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(setDefaultButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(smallInfoText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(connectionProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectionTestButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(okButton)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Obsługa przycisku "Connection test"
     * @param evt 
     */
    private void connectionTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionTestButtonActionPerformed
        try {
            connectionProgress.setStringPainted(true);
            // tworzy i koduje do przesłania przez POST prosty graf
            String toSend = URLEncoder.encode("[ROOT [0]]", "UTF-8");
            connectionProgress.setValue(10);

            // Określa punkt końcowy serwera do wysyłania żądania HTTP
            URL serverUrl = new URL(urlInput.getText());
            connectionProgress.setValue(20);
            // Otwieram połączenie ze zdalnym serwerem
            HttpURLConnection urlConnection = (HttpURLConnection) serverUrl.openConnection();
            connectionProgress.setValue(30);

            // Należy wskazać, że chcemy pisać do ciała żądania HTTP
            urlConnection.setDoOutput(true);
            connectionProgress.setValue(40);
            // ustawia metodę dla połączenia
            urlConnection.setRequestMethod("POST");
            connectionProgress.setValue(50);
            // ustawia nazwę user-agenta dla połączenia - jakaś bardzo randowomowa, by nie był to pusty string
            urlConnection.setRequestProperty("User-Agent", "Mozilla 5.0");
            connectionProgress.setValue(60);
            
            /**
             * Ustawiam timeouty na 2 sekundy dla: połączenia, odbioru danych
             */
            urlConnection.setReadTimeout(2000);
            urlConnection.setConnectTimeout(2000);
            connectionProgress.setValue(65);

            try ( // Wysyłanie danych do żądania HTTP
                    BufferedWriter httpRequestBodyWriter = new BufferedWriter(new OutputStreamWriter(urlConnection.getOutputStream()))) {
                httpRequestBodyWriter.write("data=" + toSend);
                connectionProgress.setValue(70);
            }
            
            // czytam otrzymany obraz z połączenia - odbiór danych
            BufferedImage image = ImageIO.read(urlConnection.getInputStream());
            connectionProgress.setValue(80);
            
            /**
             * Sprawdzam czy wysokość i szerokość otrzymanego obrazu grafu testowego są większe od 0 i odpowiednio wyświetlam informację o teście
             */
            if(image.getHeight() > 0 && image.getWidth() > 0) {
                connectionProgress.setValue(100);
                JOptionPane.showMessageDialog(this, "OK (Rx200)", "Connection status Rx200", JOptionPane.INFORMATION_MESSAGE);
            }
            else {
                connectionProgress.setValue(90);
                JOptionPane.showMessageDialog(this, "Response malformed (Rx500)", "Connection status Rx500", JOptionPane.INFORMATION_MESSAGE);
            }
            
        } catch (UnsupportedEncodingException ex) {
            // informacja o niepowodzeniu
            JOptionPane.showMessageDialog(this, "Unable to test (Rx0)", "Connection status Rx0", JOptionPane.ERROR_MESSAGE);
        } catch (MalformedURLException ex) {
            // informacja o niepowodzeniu
            JOptionPane.showMessageDialog(this, "Unreachable (Rx400)", "Connection status Rx400", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            // informacja o niepowodzeniu
            JOptionPane.showMessageDialog(this, "Not responding (Rx500)", "Connection status Rx500", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_connectionTestButtonActionPerformed

    /**
     * Obsługa przycisku "Set default"
     * @param evt 
     */
    private void setDefaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDefaultButtonActionPerformed
        urlInput.setText(Generator.defaultPhpSyntaxTreeURL);
    }//GEN-LAST:event_setDefaultButtonActionPerformed

    /**
     * Obsługa przycisku Cancel
     * @param evt 
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        exit();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Obsługa przycisku OK
     * @param evt 
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        phpSyntaxTreeURL = urlInput.getText();
        exit();
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * wyjście z modalu
     */
    private void exit() {
        setVisible(false);
        dispose();
    }

    /**
     * Pokazuje modal i zwraca edytowany tutaj atrybut
     *
     * @return String
     */
    public String showDialog() {
        setModal(true);
        setLocationRelativeTo(_parent);
        setVisible(true);
        return phpSyntaxTreeURL;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JProgressBar connectionProgress;
    private javax.swing.JButton connectionTestButton;
    private javax.swing.JPanel iconPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton okButton;
    private javax.swing.JButton setDefaultButton;
    private javax.swing.JLabel smallInfoText;
    private javax.swing.JTextField urlInput;
    // End of variables declaration//GEN-END:variables
}
