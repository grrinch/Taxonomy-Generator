/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import exceptions.InvalidPropertyException;
import helper.FileChooserHelper;
import helper.Sp;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import models.*;

/**
 *
 * @author radmin
 */
public class Generator extends javax.swing.JFrame {

    /**
     * atrybuty
     */
    private Attribute[] _attributes = null;

    /**
     * Model dla JListy atrybutów
     */
    private final DefaultListModel _attributesListModel;

    /**
     * Model dla JListy właściwości
     */
    private final DefaultListModel _propertiesListModel;

    /**
     * Creates new form Generator
     */
    public Generator() {
        _propertiesListModel = new DefaultListModel();
        _attributesListModel = new DefaultListModel();

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphObjectsPlacement = new javax.swing.ButtonGroup();
        rightElementsGridPanel = new javax.swing.JPanel();
        attribPanel = new javax.swing.JPanel();
        attributesListScrollPane = new javax.swing.JScrollPane();
        attributesList = new javax.swing.JList();
        projectAndGraphPropertiesPanel = new javax.swing.JPanel();
        graphPropertiesPanel = new javax.swing.JPanel();
        graphLinesCrossing = new javax.swing.JRadioButton();
        graphLinesNotCrossing = new javax.swing.JRadioButton();
        openSaveProjectButtonPanel = new javax.swing.JPanel();
        openProjectButton = new javax.swing.JButton();
        saveProjectButton = new javax.swing.JButton();
        propertyPanel = new javax.swing.JPanel();
        propertiesListScrollPane = new javax.swing.JScrollPane();
        propertiesList = new javax.swing.JList();
        combineAttribs = new javax.swing.JButton();
        openSaveButtonPanel = new javax.swing.JPanel();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        leftChartPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Taxonomy Generator");
        setName("MainFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(800, 600));

        rightElementsGridPanel.setLayout(new java.awt.BorderLayout(0, 5));

        attribPanel.setLayout(new java.awt.BorderLayout());

        attributesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        attributesList.setToolTipText("List presenting loaded attributes");
        attributesList.setName("attributesList"); // NOI18N
        attributesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                attributesListValueChanged(evt);
            }
        });
        attributesListScrollPane.setViewportView(attributesList);
        attributesList.getAccessibleContext().setAccessibleName("atributesList");

        attribPanel.add(attributesListScrollPane, java.awt.BorderLayout.NORTH);

        projectAndGraphPropertiesPanel.setLayout(new java.awt.BorderLayout());

        graphPropertiesPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        graphPropertiesPanel.setLayout(new java.awt.BorderLayout());

        graphObjectsPlacement.add(graphLinesCrossing);
        graphLinesCrossing.setText("Cross");
        graphLinesCrossing.setToolTipText("Lines in the graph might cross");
        graphLinesCrossing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphLinesCrossingActionPerformed(evt);
            }
        });
        graphPropertiesPanel.add(graphLinesCrossing, java.awt.BorderLayout.EAST);
        graphLinesCrossing.getAccessibleContext().setAccessibleName("graphLinesCrossing");

        graphObjectsPlacement.add(graphLinesNotCrossing);
        graphLinesNotCrossing.setSelected(true);
        graphLinesNotCrossing.setText("Don't cross");
        graphLinesNotCrossing.setToolTipText("Avoids crossing of the lines in the graph");
        graphPropertiesPanel.add(graphLinesNotCrossing, java.awt.BorderLayout.WEST);

        projectAndGraphPropertiesPanel.add(graphPropertiesPanel, java.awt.BorderLayout.SOUTH);

        openSaveProjectButtonPanel.setLayout(new java.awt.GridLayout());

        openProjectButton.setText("Open project");
        openProjectButton.setToolTipText("Opens previously saved project");
        openProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openProjectButtonActionPerformed(evt);
            }
        });
        openSaveProjectButtonPanel.add(openProjectButton);

        saveProjectButton.setText("Save project");
        saveProjectButton.setToolTipText("saves current project. Useful if you set attribute names, property combinations and wish to finish working later.");
        saveProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectButtonActionPerformed(evt);
            }
        });
        openSaveProjectButtonPanel.add(saveProjectButton);

        projectAndGraphPropertiesPanel.add(openSaveProjectButtonPanel, java.awt.BorderLayout.PAGE_START);

        attribPanel.add(projectAndGraphPropertiesPanel, java.awt.BorderLayout.SOUTH);

        rightElementsGridPanel.add(attribPanel, java.awt.BorderLayout.PAGE_END);

        propertyPanel.setLayout(new java.awt.BorderLayout());

        propertiesList.setToolTipText("List representing properties in currently selected attribute");
        propertiesList.setDropMode(javax.swing.DropMode.INSERT);
        propertiesList.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        propertiesList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                propertiesListPropertyChange(evt);
            }
        });
        propertiesListScrollPane.setViewportView(propertiesList);

        propertyPanel.add(propertiesListScrollPane, java.awt.BorderLayout.CENTER);

        combineAttribs.setText("Combine Properties");
        combineAttribs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combineAttribsActionPerformed(evt);
            }
        });
        propertyPanel.add(combineAttribs, java.awt.BorderLayout.SOUTH);

        openSaveButtonPanel.setLayout(new java.awt.GridLayout(1, 0));

        openButton.setText("Open file");
        openButton.setToolTipText("Opens data file");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        openSaveButtonPanel.add(openButton);

        saveButton.setText("Save file");
        saveButton.setToolTipText("Saves currently set data file");
        openSaveButtonPanel.add(saveButton);

        propertyPanel.add(openSaveButtonPanel, java.awt.BorderLayout.PAGE_START);

        rightElementsGridPanel.add(propertyPanel, java.awt.BorderLayout.CENTER);

        leftChartPanel.setBackground(new java.awt.Color(254, 254, 254));
        leftChartPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(66, 66, 66), 1, true));
        leftChartPanel.setForeground(new java.awt.Color(205, 220, 234));

        javax.swing.GroupLayout leftChartPanelLayout = new javax.swing.GroupLayout(leftChartPanel);
        leftChartPanel.setLayout(leftChartPanelLayout);
        leftChartPanelLayout.setHorizontalGroup(
            leftChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );
        leftChartPanelLayout.setVerticalGroup(
            leftChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 574, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(leftChartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightElementsGridPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rightElementsGridPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .addComponent(leftChartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void propertiesListPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_propertiesListPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_propertiesListPropertyChange

    private void graphLinesCrossingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphLinesCrossingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_graphLinesCrossingActionPerformed

    /**
     * Akcja kliknięcia przycisku otwórz (plik z danymi)
     *
     * @param evt
     */
    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        // nowy obiekt wyboru plików
        JFileChooser plikDanych = new JFileChooser();

        // nadaję oknu tytuł
        plikDanych.setDialogTitle("Select raw data file to open");

        // ustawiam domyślną lokalizację "piętro wyżej" w katalogu "data"
        plikDanych.setCurrentDirectory(new File("../data/"));

        // ustawiam filtr dozwolonych plików na *.txt, *.data oraz katalogi
        plikDanych.setFileFilter(FileChooserHelper.OpenFileChooserFilter());

        // uruchamiam okno z wyborem plików
        int result = plikDanych.showOpenDialog(this);

        // jeśli wybrany został plik
        if (result == JFileChooser.APPROVE_OPTION) {
            clearAttributeAndPropertyLists();
            try {
                BufferedReader br = new BufferedReader(new FileReader(plikDanych.getSelectedFile().getAbsolutePath()));
                for (String linia; (linia = br.readLine()) != null;) {
                    // każdą linię dzielimy po przecinkach na przypadki uczące (powinno ich w każdej linii być tyle samo - jest to nasza lista atrybutów
                    String[] learningCaseProperties = linia.split(",");

                    createAttributesArrayIfRequired(learningCaseProperties);

                    for (int j = 0; j < learningCaseProperties.length; j++) {
                        createAttributeInArrayIfRequired(j);
                        fileReadPropertyAddToAttribute(j, learningCaseProperties);
                    }
                }
                setModelsForAttributeAndPropertyLists();
                setEventListenersForAttributeAndPropertyLists();

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Nie można czytać z podanego pliku.\n" + ex.toString(), "Błąd", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_openButtonActionPerformed

    /**
     * Czyści modele list atrybutów i właściwości (JListy powinny być puste)
     */
    private void clearAttributeAndPropertyLists() {
        // ~...
        _attributesListModel.clear();
        _propertiesListModel.clear();
    }

    /**
     * Binduje nasłuchiwanie na listach atrybutów i właściwości
     */
    private void setEventListenersForAttributeAndPropertyLists() {
        attributesList.addListSelectionListener(helper.Listeners.AttributesListListener(_attributes, attributesList, _propertiesListModel));
        attributesList.addMouseListener(helper.Listeners.AttributesDoubleClickListener(_attributes));
    }

    /**
     * Ustawia modele dla list atrybutów i właściwości
     */
    private void setModelsForAttributeAndPropertyLists() {
        propertiesList.setModel(_propertiesListModel);
        attributesList.setModel(_attributesListModel);
    }

    /**
     * Tworzy atrybut w tablicy jeśli jeszcze nie istnieje
     *
     * @param j aktualna iteracja po właściwościach w linii
     */
    private void createAttributeInArrayIfRequired(int j) {
        if (null == _attributes[j] && !(_attributes[j] instanceof models.Attribute)) {
            _attributes[j] = new Attribute(j + 1);
            _attributesListModel.addElement(_attributes[j]);
        }
    }

    private void recreateAttributesListModel() {
        for (int i = 0; i < _attributes.length; i++) {
            _attributesListModel.addElement(_attributes[i]);
        }
    }

    /**
     * Tworzę tablicę x atrybutów, gdzie x = learningCaseProperties.length, jeśli lista atrybutów jeszcze nie istnieje
     *
     * @param learningCaseProperties właściwości z aktualnie czytanej linii pliku
     */
    private void createAttributesArrayIfRequired(String[] learningCaseProperties) {
        // tworzę tablicę x atrybutów, gdzie x = learningCaseProperties.length, jeśli lista atrybutów jeszcze nie istnieje
        if (_attributes == null) {
            _attributes = new Attribute[learningCaseProperties.length];
        }
    }

    /**
     * Dodaje właściwości do odpowiednich atrybutów
     *
     * @param j aktualna iteracja po właściwościach w linii
     * @param learningCaseProperties właściwości z aktualnie czytanej linii pliku
     */
    private void fileReadPropertyAddToAttribute(int j, String[] learningCaseProperties) {
        if (_attributes[j].getWłaściwości().length > 0) { // w atrybucie są już właściwości
            if (!_attributes[j].find(j + 1, learningCaseProperties[j])) { // sprawdzam, czy atrybut ma już właściwość o dokładnie takim ID oraz wartości/nazwie
                // nie ma, więc próbuję dodać
                try {
                    _attributes[j].add(new Property(j + 1, learningCaseProperties[j]));
                } catch (InvalidPropertyException ex) {

                }
            } // byłby else, ale jeśli taka właściwość już istnieje, to jej nie dodaję

        } else { // nie ma jeszcze żadnych właściwości w tym atrybucie
            // próbuję dodać nową właściwość w danym miejscu oraz o odpowiedniej wartości
            try {
                _attributes[j].add(new Property(j + 1, learningCaseProperties[j]));
            } catch (InvalidPropertyException ex) {

            }
        }
    }

    private void attributesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_attributesListValueChanged
    }//GEN-LAST:event_attributesListValueChanged

    /**
     * Akcja po kliknięciu przycisku Zapisz projekt
     *
     * @param evt
     */
    private void saveProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectButtonActionPerformed
        // okno wyboru pliku
        JFileChooser plikProjektu = new JFileChooser();

        // tytuł okna
        plikProjektu.setDialogTitle("Specify a project file to save");

        // ustawiam domyślną lokalizację "piętro wyżej" w katalogu "projects"
        plikProjektu.setCurrentDirectory(new File("../projects/"));

        // ustawiam filtr dozwolonych plików na *.txt, *.data oraz katalogi
        plikProjektu.setFileFilter(FileChooserHelper.OpenSaveProjectChooserFilter());

        // pokaż okno i zwróć co zostało naciśnięte
        int result = plikProjektu.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            String filename = plikProjektu.getSelectedFile().getAbsolutePath();
            filename += filename.endsWith(".taxp") ? "" : ".taxp";
            saveProject(filename);
        }
    }//GEN-LAST:event_saveProjectButtonActionPerformed

    /**
     * Akcja po kliknięciu przycisku Otwórz projekt
     *
     * @param evt
     */
    private void openProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openProjectButtonActionPerformed
        // okno wyboru pliku
        JFileChooser plikProjektu = new JFileChooser();

        // tytuł okna
        plikProjektu.setDialogTitle("Specify a project file to save");

        // ustawiam domyślną lokalizację "piętro wyżej" w katalogu "projects"
        plikProjektu.setCurrentDirectory(new File("../projects/"));

        // ustawiam filtr dozwolonych plików na *.txt, *.data oraz katalogi
        plikProjektu.setFileFilter(FileChooserHelper.OpenSaveProjectChooserFilter());

        // pokaż okno i zwróć co zostało naciśnięte
        int result = plikProjektu.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            String filename = plikProjektu.getSelectedFile().getAbsolutePath();

            try {
                try (ObjectInputStream ser = new ObjectInputStream(
                        new BufferedInputStream(
                                new FileInputStream(filename)))) {
                            clearAttributeAndPropertyLists();

                            _attributes = (Attribute[]) ser.readObject();

                            recreateAttributesListModel();

                            setModelsForAttributeAndPropertyLists();

                            setEventListenersForAttributeAndPropertyLists();
                        }
                        // komunikat o powodzeniu
                        JOptionPane.showMessageDialog(this, "Project opened successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

            } catch (IOException ex) {
                // komunikat o błędzie
                JOptionPane.showMessageDialog(this, "Unable to read the project file ...\n" + ex.toString(), "Error", JOptionPane.WARNING_MESSAGE);
            } catch (ClassNotFoundException ex) {
                // komunikat o błędzie
                JOptionPane.showMessageDialog(this, "Unable to deserialize the project file ...\n" + ex.toString(), "Error", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_openProjectButtonActionPerformed

    /**
     * Akcja po kliknięciu przycisku Połącz właściwości
     *
     * @param evt
     */
    private void combineAttribsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combineAttribsActionPerformed
        int[] indexes = propertiesList.getSelectedIndices();
        if (indexes.length > 1) {
            PropertyCombineModal modal = new PropertyCombineModal(this, true);

            // dostaję tymczasową właściwość - w niej będą wszystkie połączone
            Property p = modal.showDialog();

            // dodajemy do tymczasowej właściwości wszystkie z listy
            for (int e : indexes) {
                try {
                    //wyciągamy z modelu właściwości odpowiednią z danego indeksu
                    Property temp = (Property) _propertiesListModel.get(e);
                    Sp.s("Wyjmuję z modelu właściwości: " + temp.getNazwa());
                    
                    // usuwamy ją również z atrybutów
                    if(_attributes[attributesList.getSelectedIndex()].remove(temp)) {
                        // dodajemy do tymczasowej właściwości
                        p.add(temp);
                        Sp.s("Dodaję do właściwości: " + temp.getNazwa());
                    }
                    else {
                        throw new InvalidPropertyException("Unable to delete property at index(" + e + ") from the attributes list.");
                    }
                } catch (InvalidPropertyException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error deleting combined properties", JOptionPane.ERROR_MESSAGE);
                }
            }
            for (Property pp : p.getElementy()) {
                Sp.s("Staram się usunąć z modelu właściwości właściwość: " + pp.getNazwa());
                _propertiesListModel.removeElement(pp);
            }
            // teraz musimy zaktualizować poziom naszej nowej właściwości, dodać ją w odpowiednim atrybucie zamiast poprzednich oraz zaktualizować listę
            p.updatePoziomOnCombine();
            
            try {
                // dodajemy do listy atrybutów
                _attributes[attributesList.getSelectedIndex()].add(p);
                // dodajemy do modelu właściwości
                _propertiesListModel.addElement(p);
                
                for(Property pp: _attributes[attributesList.getSelectedIndex()].getWłaściwości()) {
                    Sp.s(pp.getNazwa());
                }
            } catch (InvalidPropertyException ex) {
                // w przypadku gdy nie można dodać właściwości do atrybutów
                JOptionPane.showMessageDialog(this, "Unable to add combined property to argument\n" + ex.getMessage(), "Error setting combined properties", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(this, "At least two properties must be selected for this action", "Too few arguments", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_combineAttribsActionPerformed

    /**
     * Zapisuje projekt jako zaserializowany plik Javy
     *
     * @param filename nazwa pliku do zapisu
     * @return boolean czy zapis udany
     */
    public Boolean saveProject(String filename) {
        try {
            try (ObjectOutputStream ser = new ObjectOutputStream(
                    new BufferedOutputStream(
                            new FileOutputStream(filename)))) {
                        ser.writeObject(_attributes);
                    }
                    // komunikat o powodzeniu
                    JOptionPane.showMessageDialog(this, "Project saved successfully.", "Saved!", JOptionPane.INFORMATION_MESSAGE);
                    return true;
        } catch (IOException e) {
            // komunikat o błędzie
            JOptionPane.showMessageDialog(this, "Unable to serialize to project file ...\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Generator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Generator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Generator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Generator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Generator().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel attribPanel;
    private javax.swing.JList attributesList;
    private javax.swing.JScrollPane attributesListScrollPane;
    private javax.swing.JButton combineAttribs;
    private javax.swing.JRadioButton graphLinesCrossing;
    private javax.swing.JRadioButton graphLinesNotCrossing;
    private javax.swing.ButtonGroup graphObjectsPlacement;
    private javax.swing.JPanel graphPropertiesPanel;
    private javax.swing.JPanel leftChartPanel;
    private javax.swing.JButton openButton;
    private javax.swing.JButton openProjectButton;
    private javax.swing.JPanel openSaveButtonPanel;
    private javax.swing.JPanel openSaveProjectButtonPanel;
    private javax.swing.JPanel projectAndGraphPropertiesPanel;
    private javax.swing.JList propertiesList;
    private javax.swing.JScrollPane propertiesListScrollPane;
    private javax.swing.JPanel propertyPanel;
    private javax.swing.JPanel rightElementsGridPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveProjectButton;
    // End of variables declaration//GEN-END:variables
}
